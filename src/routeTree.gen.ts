/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AppWebhooksIndexRouteImport } from './routes/_app/webhooks/index'
import { Route as AppSubscriptionsIndexRouteImport } from './routes/_app/subscriptions/index'
import { Route as AppPodcastsIndexRouteImport } from './routes/_app/podcasts/index'
import { Route as AppKeysIndexRouteImport } from './routes/_app/keys/index'
import { Route as AppJobsIndexRouteImport } from './routes/_app/jobs/index'
import { Route as AppPodcastsIdRouteImport } from './routes/_app/podcasts/$id'

const SigninLazyRouteImport = createFileRoute('/signin')()

const SigninLazyRoute = SigninLazyRouteImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/signin.lazy').then((d) => d.Route))
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppWebhooksIndexRoute = AppWebhooksIndexRouteImport.update({
  id: '/webhooks/',
  path: '/webhooks/',
  getParentRoute: () => AppRoute,
} as any)
const AppSubscriptionsIndexRoute = AppSubscriptionsIndexRouteImport.update({
  id: '/subscriptions/',
  path: '/subscriptions/',
  getParentRoute: () => AppRoute,
} as any)
const AppPodcastsIndexRoute = AppPodcastsIndexRouteImport.update({
  id: '/podcasts/',
  path: '/podcasts/',
  getParentRoute: () => AppRoute,
} as any)
const AppKeysIndexRoute = AppKeysIndexRouteImport.update({
  id: '/keys/',
  path: '/keys/',
  getParentRoute: () => AppRoute,
} as any)
const AppJobsIndexRoute = AppJobsIndexRouteImport.update({
  id: '/jobs/',
  path: '/jobs/',
  getParentRoute: () => AppRoute,
} as any)
const AppPodcastsIdRoute = AppPodcastsIdRouteImport.update({
  id: '/podcasts/$id',
  path: '/podcasts/$id',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/signin': typeof SigninLazyRoute
  '/': typeof AppIndexRoute
  '/podcasts/$id': typeof AppPodcastsIdRoute
  '/jobs': typeof AppJobsIndexRoute
  '/keys': typeof AppKeysIndexRoute
  '/podcasts': typeof AppPodcastsIndexRoute
  '/subscriptions': typeof AppSubscriptionsIndexRoute
  '/webhooks': typeof AppWebhooksIndexRoute
}
export interface FileRoutesByTo {
  '/signin': typeof SigninLazyRoute
  '/': typeof AppIndexRoute
  '/podcasts/$id': typeof AppPodcastsIdRoute
  '/jobs': typeof AppJobsIndexRoute
  '/keys': typeof AppKeysIndexRoute
  '/podcasts': typeof AppPodcastsIndexRoute
  '/subscriptions': typeof AppSubscriptionsIndexRoute
  '/webhooks': typeof AppWebhooksIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/signin': typeof SigninLazyRoute
  '/_app/': typeof AppIndexRoute
  '/_app/podcasts/$id': typeof AppPodcastsIdRoute
  '/_app/jobs/': typeof AppJobsIndexRoute
  '/_app/keys/': typeof AppKeysIndexRoute
  '/_app/podcasts/': typeof AppPodcastsIndexRoute
  '/_app/subscriptions/': typeof AppSubscriptionsIndexRoute
  '/_app/webhooks/': typeof AppWebhooksIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/signin'
    | '/'
    | '/podcasts/$id'
    | '/jobs'
    | '/keys'
    | '/podcasts'
    | '/subscriptions'
    | '/webhooks'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/signin'
    | '/'
    | '/podcasts/$id'
    | '/jobs'
    | '/keys'
    | '/podcasts'
    | '/subscriptions'
    | '/webhooks'
  id:
    | '__root__'
    | '/_app'
    | '/signin'
    | '/_app/'
    | '/_app/podcasts/$id'
    | '/_app/jobs/'
    | '/_app/keys/'
    | '/_app/podcasts/'
    | '/_app/subscriptions/'
    | '/_app/webhooks/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  SigninLazyRoute: typeof SigninLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/webhooks/': {
      id: '/_app/webhooks/'
      path: '/webhooks'
      fullPath: '/webhooks'
      preLoaderRoute: typeof AppWebhooksIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/subscriptions/': {
      id: '/_app/subscriptions/'
      path: '/subscriptions'
      fullPath: '/subscriptions'
      preLoaderRoute: typeof AppSubscriptionsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/podcasts/': {
      id: '/_app/podcasts/'
      path: '/podcasts'
      fullPath: '/podcasts'
      preLoaderRoute: typeof AppPodcastsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/keys/': {
      id: '/_app/keys/'
      path: '/keys'
      fullPath: '/keys'
      preLoaderRoute: typeof AppKeysIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/jobs/': {
      id: '/_app/jobs/'
      path: '/jobs'
      fullPath: '/jobs'
      preLoaderRoute: typeof AppJobsIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/podcasts/$id': {
      id: '/_app/podcasts/$id'
      path: '/podcasts/$id'
      fullPath: '/podcasts/$id'
      preLoaderRoute: typeof AppPodcastsIdRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppPodcastsIdRoute: typeof AppPodcastsIdRoute
  AppJobsIndexRoute: typeof AppJobsIndexRoute
  AppKeysIndexRoute: typeof AppKeysIndexRoute
  AppPodcastsIndexRoute: typeof AppPodcastsIndexRoute
  AppSubscriptionsIndexRoute: typeof AppSubscriptionsIndexRoute
  AppWebhooksIndexRoute: typeof AppWebhooksIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppPodcastsIdRoute: AppPodcastsIdRoute,
  AppJobsIndexRoute: AppJobsIndexRoute,
  AppKeysIndexRoute: AppKeysIndexRoute,
  AppPodcastsIndexRoute: AppPodcastsIndexRoute,
  AppSubscriptionsIndexRoute: AppSubscriptionsIndexRoute,
  AppWebhooksIndexRoute: AppWebhooksIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  SigninLazyRoute: SigninLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
